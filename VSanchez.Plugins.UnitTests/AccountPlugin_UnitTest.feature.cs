// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VSanchez.Plugins.UnitTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AccountPlugin_UnitTest")]
    public partial class AccountPlugin_UnitTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AccountPlugin_UnitTest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AccountPlugin_UnitTest", "\tIn order to check the update of the city and country\r\n\tAs an user\r\n\tI want to be" +
                    " shown the result as the account", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "name",
                        "Axazure"});
            table1.AddRow(new string[] {
                        "address1_city",
                        "Madrid"});
            table1.AddRow(new string[] {
                        "address1_country",
                        "Spain"});
#line 7
 testRunner.Given("the entity \"account\" known as Axazure exists with the fields", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "parentcustomerid",
                        "Axazure"});
            table2.AddRow(new string[] {
                        "firstname",
                        "Victor"});
            table2.AddRow(new string[] {
                        "lastname",
                        "Sanchez"});
            table2.AddRow(new string[] {
                        "fullname",
                        "Victor Sanchez"});
            table2.AddRow(new string[] {
                        "vso_dni",
                        "1235561G"});
            table2.AddRow(new string[] {
                        "address1_city",
                        "Glasgow"});
            table2.AddRow(new string[] {
                        "address1_country",
                        "Scotland"});
#line 12
 testRunner.And("the entity \"contact\" known as VictorSanchez exists with the fields", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "parentcustomerid",
                        "Axazure"});
            table3.AddRow(new string[] {
                        "firstname",
                        "Juan"});
            table3.AddRow(new string[] {
                        "lastname",
                        "Barbanegra"});
            table3.AddRow(new string[] {
                        "fullname",
                        "Juan Barbanegra"});
            table3.AddRow(new string[] {
                        "vso_dni",
                        "1425561G"});
            table3.AddRow(new string[] {
                        "address1_city",
                        "Paris"});
            table3.AddRow(new string[] {
                        "address1_country",
                        "Francia"});
#line 21
 testRunner.And("the entity \"contact\" known as JuanBarbanegra exists with the fields", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "account",
                        "name"});
            table4.AddRow(new string[] {
                        "contact",
                        "fullname"});
#line 30
 testRunner.And("the entity name contains primary attribute name", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change the city for an account")]
        [NUnit.Framework.CategoryAttribute("AccountUpdate")]
        public virtual void ChangeTheCityForAnAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "AccountUpdate"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change the city for an account", null, new string[] {
                        "AccountUpdate"});
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 37
 testRunner.When("I call the plugin AccountPlugin with record \"Axazure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.And("all the entities are refreshed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.Then("the service should have 2 records of the entity contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "parentcustomerid",
                            "Axazure"});
                table5.AddRow(new string[] {
                            "firstname",
                            "Victor"});
                table5.AddRow(new string[] {
                            "lastname",
                            "Sanchez"});
                table5.AddRow(new string[] {
                            "vso_dni",
                            "1235561G"});
                table5.AddRow(new string[] {
                            "address1_city",
                            "Madrid"});
                table5.AddRow(new string[] {
                            "address1_country",
                            "Spain"});
#line 40
 testRunner.And("the entity VictorSanchez should have fields", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "parentcustomerid",
                            "Axazure"});
                table6.AddRow(new string[] {
                            "firstname",
                            "Juan"});
                table6.AddRow(new string[] {
                            "lastname",
                            "Barbanegra"});
                table6.AddRow(new string[] {
                            "vso_dni",
                            "1425561G"});
                table6.AddRow(new string[] {
                            "address1_city",
                            "Madrid"});
                table6.AddRow(new string[] {
                            "address1_country",
                            "Spain"});
#line 48
 testRunner.And("the entity JuanBarbanegra should have fields", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
